from aiogram import Router, types
import datetime
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db_crud_operations import (
    get_spreadsheets_by_user,
    get_spreadsheet_id_by_name,
    get_sheets_by_spreadsheet_id,
    add_sheet_to_db
)
from google_sheets.google_sheets_operations import (
    append_new_values,
    show_last_ten_expenses,
    show_this_month_expenses,
    create_new_sheet
)
from .utils import (
    table_name_false_input,
    show_tables_as_reply
)

router = Router()


class Expense(StatesGroup):
    waiting_for_add_expense = State()
    waiting_for_expense_item = State()
    waiting_for_expense_amount = State()
    show_expenses_choose_table = State()
    show_monthly_expenses_choose_table = State()


@router.message(Command("add_expense"))
async def add_new_expense_start(message: types.Message, state: FSMContext):
    user_spreadsheets = get_spreadsheets_by_user(message.from_user.id)
    if user_spreadsheets:
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–∞:"
        await show_tables_as_reply(
            spreadsheets_list=user_spreadsheets,
            message=message,
            state=state,
            text=msg,
            next_state=Expense.waiting_for_add_expense
        )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏!\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /table, –∞ –∑–∞—Ç–µ–º \n"
            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—á–∫—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏"'
        )

@router.message(Expense.waiting_for_add_expense)
async def add_expense_item_start(message: types.Message, state: FSMContext):
    s_id = get_spreadsheet_id_by_name(name=message.text)
    if s_id:
        await state.update_data(spreadsheet_id=s_id)
        msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤.\n'\
            '–ü—Ä–∏–º–µ—Ä: "–º–∞–≥–∞–∑–∏–Ω", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–æ–º–º—É–Ω–∞–ª–∫–∞"'
        await message.answer(text=msg)
        await state.set_state(Expense.waiting_for_expense_item)
    else:
        await table_name_false_input(message, state)

@router.message(Expense.waiting_for_expense_item)
async def add_new_expense_item(message: types.Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–µ –∫–æ—Ä–æ—á–µ!")
        return
    await state.update_data(expense_item=message.text)
    await message.answer(
        f'–í–∞—à–∞ —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤: "{message.text}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞.\n'
        '–ü—Ä–∏–º–µ—Ä: 2000, 350, 115.45'
    )
    await state.set_state(Expense.waiting_for_expense_amount)

@router.message(Expense.waiting_for_expense_amount)
async def add_new_expense_amount(message: types.Message, state: FSMContext):
    if not message.text.isdecimal():
        await message.answer(
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
        )
        return
    if len(str(message.text)) > 15:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Å—Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?üòÅ"        
        )
        return
    await state.update_data(expense_amount=message.text)
    user_data = await state.get_data()
    await message.answer(f'–í–∞—à–∞ —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞: {user_data["expense_amount"]}.\n')
    base_spreadsheet_id = user_data.get("spreadsheet_id", None)
    sheets = get_sheets_by_spreadsheet_id(s_id=base_spreadsheet_id)
    todays_month_and_year = datetime.datetime.today().strftime("%m/%Y")
    if todays_month_and_year not in sheets:
        sheet_id, sheet_name = create_new_sheet(
            message.from_user.id,
            spreadsheet_id=base_spreadsheet_id,
            title=todays_month_and_year
        )
        sheets.append(sheet_name)
        add_sheet_to_db(
            google_unique_id=sheet_id, 
            name=sheet_name, 
            spreadsheet_id=base_spreadsheet_id
        )
    append_new_values(
        message.from_user.id,
        spreadsheet_id=base_spreadsheet_id, 
        values_list=[user_data.get("expense_item", ""),
        user_data.get("expense_amount", "")],
        sheet_name=sheets[-1]
    )
    await message.answer(
        '–°—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
        '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /last_ten_expenses\n'
        '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /this_month_expenses\n'
        '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_expense\n'
    )
    await state.clear()

@router.message(Command("last_ten_expenses"))
async def view_last_ten_expenses_start(message: types.Message, state: FSMContext):
    user_spreadsheets = get_spreadsheets_by_user(message.from_user.id)
    if user_spreadsheets:
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤:"
        await show_tables_as_reply(
            spreadsheets_list=user_spreadsheets,
            message=message,
            state=state,
            text=msg,
            next_state=Expense.show_expenses_choose_table
        )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏!\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É\n"
            '"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—á–∫—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏"'
        )


@router.message(Expense.show_expenses_choose_table)
async def view_last_ten_expenses_success(message: types.Message, state: FSMContext):
    table_id = get_spreadsheet_id_by_name(name=message.text)
    if table_id:
        sheets = get_sheets_by_spreadsheet_id(s_id=table_id)
        result = show_last_ten_expenses(
            message.from_user.id,
            table_id, 
            sheet_name=sheets[-1]
        )
        if result is None:
            await message.answer("–ü–æ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤!")
            return
        await message.answer(
             f'–í–æ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n{result}'
        )
        await state.clear()
    else:
        await table_name_false_input(message, state)

@router.message(Command("this_month_expenses"))
async def view_this_month_expenses_start(message: types.Message, state: FSMContext):
    user_spreadsheets = get_spreadsheets_by_user(message.from_user.id)
    if user_spreadsheets:
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:"
        await show_tables_as_reply(
            spreadsheets_list=user_spreadsheets,
            message=message,
            state=state,
            text=msg,
            next_state=Expense.show_monthly_expenses_choose_table
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏!\n\n"
                             "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É\n"
                             '"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—á–∫—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏"')

@router.message(Expense.show_monthly_expenses_choose_table)
async def view_this_month_expenses_success(message: types.Message, state: FSMContext):
    table_id = get_spreadsheet_id_by_name(name=message.text)
    if table_id:
        sheets = get_sheets_by_spreadsheet_id(s_id=table_id)    
        result = show_this_month_expenses(
            message.from_user.id,
            table_id, 
            sheet_name=sheets[-1]
        )
        await message.answer(
             f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {result}"
        )
    else:
        await table_name_false_input(message, state)
